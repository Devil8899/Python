https://www.cnblogs.com/yuanchenqi/articles/6083427.html
著名的MVC模式：所谓MVC就是把web应用分为模型(M),控制器(C),视图(V)三层；他们之间以一种插件似的，
松耦合的方式连接在一起。
模型负责业务对象与数据库的对象(ORM),
视图负责与用户的交互(页面)，
控制器(C)接受用户的输入调用模型和视图完成用户的请求。
                  

Django的MTV模式本质上与MVC模式没有什么差别，也是各组件之间为了保持松耦合关系，
只是定义上有些许不同，Django的MTV分别代表：
       Model(模型)：负责业务对象与数据库的对象(ORM)
       Template(模版)：负责如何把页面展示给用户
       View(视图)：负责业务逻辑，并在适当的时候调用Model和Template
       此外，Django还有一个url分发器，它的作用是将一个个URL的页面请求分发给不同的view处理，
       view再调用相应的Model和Template


1. #安装： #pip3 install django  官网 https://www.djangoproject.com/download/
          pip install Django==2.0.1
          python -m django --version
2.创建project  django-admin startproject mysite
 生成了一个mysite目录
  ---mysite
          ---settings.py
          ---url.py
          ---wsgi.py
       ---- manage.py(启动文件)
manage.py ----- Django项目里面的工具，通过它可以调用django shell和数据库等。
settings.py ---- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。
urls.py ----- 负责把URL模式映射到应用程序。



3.创建APP 一个应用application  一个project 可以对应多个应用
       python manage.py startapp  myapp
  生成一个目录myapp
        admin.py文件
        views.py
        models.py
        migrations
        等文件
在urls 设置函数和url映射
在views进行视图展示

启动django项目：python manage.py runserver 地址 端口 8080
通过pycharme直接启动

创建模板
python manage.py makemigrations
创建数据库
python manage.py migrate
数据库名：blog_user


1 .url.py映射
1.settings配置文件 项目启动先会读取到里面的所有配置 包括模板文件和静态文件的路径等设置
2.urls配置访问路径对应的views视图函数 函数通过render或者response返回给浏览器渲染页面,
也可以带变量返回替换调前台html的占位符
html占位符写法{{占位符}}
html页面可以定义for in循环遍历变量
3.通过urls可以给视图函数传参数,函数接收后在方法内进行使用
3.通过urls可以给访问路径起别名,好处就是没有写死访问路径,方便代码维护
4.url映射分发：每个应用单独分配自己的url映射,全局的urls文件只做总的分发,按照应用来分发
    1.在全局urls引入include 添加url('blog/', include('blog.urls'))
    #这样访问所有的blog路径的页面会自动去找blog应用下的urls文件做分发
    2.在blog添加urls文件 代码同全局urls相同,写url映射与视图函数


2. 视图函数views.py
http请求中产生两个核心对象：
        http请求：HttpRequest对象
        http响应：HttpResponse对象
所在位置：django.http
之前我们用到的参数request就是HttpRequest    检测方法：isinstance(request,HttpRequest)

req
常用属性
 path：       请求页面的全路径，不包括域名
 method：     请求中使用的HTTP方法的字符串表示。全大写表示。例如 req.method=="GET":
 GET:         包含所有HTTP GET参数的类字典对象
 POST：       包含所有HTTP POST参数的类字典对象
 COOKIES:     包含所有cookies的标准Python字典对象；keys和values都是字符串。
 FILES：      包含所有上传文件的类字典对象；FILES中的每一个Key都是<input type="file" name="" />标签中                     name属性的值，FILES中的每一个value同时也是一个标准的python字典对象，包含下面三个Keys：
             filename：      上传文件名，用字符串表示
             content_type:   上传文件的Content Type
             content：       上传文件的原始内容
user：       是一个django.contrib.auth.models.User对象，代表当前登陆的用户。如果访问用户当前
#              没有登陆，user将被初始化为django.contrib.auth.models.AnonymousUser的实例。你
#              可以通过user的is_authenticated()方法来辨别用户是否登陆：
#              if req.user.is_authenticated();只有激活Django中的AuthenticationMiddleware
#              时该属性才可用
#
session：    唯一可读写的属性，代表当前会话的字典对象；自己有激活Django中的session支持时该属性才可用。
一个方法
#方法
get_full_path(),   比如：http://127.0.0.1:8000/index33/?name=123 ,req.get_full_path()得到的结果就是/index33/?name=123
req.path:/index33
request.POST.getlist('')

response方法
HttpResponse对象：
  对于HttpRequest对象来说，是由django自动创建的，但是，HttpResponse对象就必须我们自己创建。
  每个view请求处理方法必须返回一个HttpResponse对象。
  HttpResponse类在django.http.HttpResponse
  在HttpResponse对象上扩展的常用方法：
页面渲染：         render()（推荐）<br>   
                  render_to_response(),
页面跳转：         redirect("路径")
locals()：        可以直接将函数中所有的变量传给模板 这样前台直接可以使用后台变量 不用一个一个传
用法 render('index.html',locals())

总结: render和redirect的区别:
#   1 if render的页面需要模板语言渲染,需要的将数据库的数据加载到html,那么所有的这一部分
#     除了写在yuan_back的视图函数中,必须还要写在login中,代码重复,没有解耦.

#   2 the most important: url没有跳转到/yuan_back/,而是还在/login/,所以当刷新后
#     又得重新登录.
